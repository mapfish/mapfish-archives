# 
# Copyright (C) 2007-2008  Camptocamp
#  
# This file is part of MapFish
#  
# MapFish is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#  
# MapFish is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#  
# You should have received a copy of the GNU Lesser General Public License
# along with MapFish.  If not, see <http://www.gnu.org/licenses/>.
#


from pylons import config

from sqlalchemy import Column, MetaData, Table, types
from sqlalchemy.orm import mapper

from mapfish.sqlalchemygeom import Geometry
from mapfish.pfpfeature import Feature

${modelTabObj} = Table('${table}',
    MetaData(config['pylons.g'].sa_${db}_engine),
    Column('${idColName}', types.${idColType}, key='_mf_fid', primary_key=True),
    Column('${geomColName}', Geometry(${epsg}), key='_mf_geom'),
    autoload=True)

class ${modelClass}(object):
    def __init__(self, geometry):
        self._mf_geom = geometry

    def _getgeom(self):
        return self._mf_geom

    def _setgeom(self, val):
        self._mf_geom = val

    geometry = property(_getgeom, _setgeom)

    def __getitem__(self, key):
        return self.__dict__[key]

    def __setitem__(self, key, val):
        if key in self.c.keys():
            self.__dict__[key] = val

    def __contains__(self, key):
        return key in self.__dict__

    def toFeature(self):
        attributes = {}
        for k in self.c.keys():
            k = k.encode('ascii')
            if k != '_mf_fid' and k != '_mf_geom':
                attributes[k] = self.__dict__[k]
        return Feature(id=self._mf_fid, geometry=self._mf_geom, **attributes)

mapper(${modelClass}, ${modelTabObj})
