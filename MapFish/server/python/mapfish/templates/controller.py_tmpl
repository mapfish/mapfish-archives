# 
# Copyright (C) 2007-2008  Camptocamp
#  
# This file is part of MapFish
#  
# MapFish is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#  
# MapFish is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#  
# You should have received a copy of the GNU Lesser General Public License
# along with MapFish.  If not, see <http://www.gnu.org/licenses/>.
#

import logging

from sqlalchemy.sql import and_

from shapely.geometry import asShape

from ${basePkg}.lib.base import *
from ${basePkg}.model.${modName} import ${modelClass}

from mapfish.pfpfeature import FeatureCollection
from mapfish.plugins.search import Search

import geojson

log = logging.getLogger(__name__)

class ${contrClass}Controller(BaseController):
    def get(self):
        search = Search(
            ${modelClass}._table.c._mf_fid,
            ${modelClass}._table.c._mf_geom,
            ${epsg}, '${units}')
        expr = search.buildExpression(request)
        #
        # CUSTOM CODE GOES HERE
        #
        # Here you can augment the expression with your own app-specific
        # filters.
        #
        # Example:
        # if 'name' in request.params:
        #     e = model.summits_table.c.name.op('ilike')('%' + request.params['name']  + '%')
        #     # update query expression
        #     if expr is not None:
        #         expr = and_(expr, e)
        #     else:
        #         expr = e
        #
        ${pluralName} = search.query(
            model.Session, ${modelClass}, ${modelClass}._table, expr)
        if len(${pluralName}) > 0:
            return geojson.dumps(
                FeatureCollection([o.toFeature() for o in ${pluralName}]))

    #
    # The post, put and delete methods are used for feature editing. If you
    # don't want feature editing, you can just not add routes to these methods
    # in config/routing.py. If you don't want feature editing and care about
    # having unneeded code, you can remove these methods entirely.
    #

    def post(self):
        content = request.environ['wsgi.input'].read(int(request.environ['CONTENT_LENGTH']))
        factory = lambda ob: geojson.GeoJSON.to_instance(ob)
        collection = geojson.loads(content, object_hook=factory)
        if not isinstance(collection, geojson.feature.FeatureCollection):
            response.status_code = 400
            return
        ${pluralName} = []
        for feature in collection.features:
            create = False
            ${singularName} = None
            if isinstance(feature.id, int):
                ${singularName} = model.Session.query(${modelClass}).get(feature.id)
            if ${singularName} is None:
                ${singularName} = ${modelClass}(asShape(feature.geometry))
                create = True
            for key in feature.properties:
                ${singularName}[key] = feature.properties[key]
            if create:
                model.Session.save(${singularName})
            ${pluralName}.append(${singularName})
        model.Session.commit()
        response.status_code = 201
        if len(${pluralName}) > 0:
            return geojson.dumps(FeatureCollection([o.toFeature() for o in ${pluralName}]))
        return

    def put(self):
        fid = self.getFid()
        if fid is None:
            return self.post()
        ${singularName} = model.Session.query(${modelClass}).get(fid)
        if ${singularName} is None:
            response.status_code = 404
            return
        content = request.environ['wsgi.input'].read(int(request.environ['CONTENT_LENGTH']))
        factory = lambda ob: geojson.GeoJSON.to_instance(ob)
        feature = geojson.loads(content, object_hook=factory)
        if not isinstance(feature, geojson.feature.Feature):
            response.status_code = 400
            return response
        ${singularName}.geometry = asShape(feature.geometry)
        for key in feature.properties:
            ${singularName}[key] = feature.properties[key]
        model.Session.commit()
        response.status_code = 201
        return geojson.dumps(${singularName}.toFeature())

    def delete(self):
        fid = self.getFid()
        if fid is None:
            response.status_code = 400
            return
        ${singularName} = model.Session.query(${modelClass}).get(fid)
        if ${singularName} is None:
            response.status_code = 404
            return
        model.Session.delete(${singularName})
        model.Session.commit()
        response.status_code = 204
        return

    def getFid(self):
        fid = None
        path = request.path_info.split("/")
        if len(path) > 1:
            pathPieces = path[-1].split(".")
            if pathPieces[0].isdigit():
                fid = int(pathPieces[0])
        return fid
