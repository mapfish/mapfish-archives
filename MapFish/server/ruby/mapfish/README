Mapfish server plugin for Ruby on Rails
=======================================

This HowTo describes step by step how to use `MapFish <http://www.mapfish.org/>`_ Server Framework to set up a MapFish project. A MapFish project defines Web Services on which MapFish Client components can rely. See `here <http://trac.mapfish.org/trac/mapfish/wiki/MapFishProtocol>`_ for a description of the interfaces provided by MapFish Web Services.

The Mapfish server for Ruby is implemented as a plugin for the `Ruby on Rails <http://www.rubyonrails.org/>`_ framework.

A sample application is available at `GitHub <http://github.com/pka/mapfish-rails-sample-app/tree>`_.

Create a MapFish project
------------------------

Create a new Rails project::

    rails --database=pogresql MyMapFishProject
    cd MyMapFishProject

Install the latest version of the Mapfish plugin::

  rake mapfish:install_client

Install the latest version of the Mapfish client libraries::

  svn export http://www.mapfish.org/svn/mapfish/trunk/MapFish/client/mfbase public/mfbase

Build the deployment libs::

   rake mapfish:build_scripts

Install the required plugins and gems::

  sudo gem install GeoRuby
  ./script/plugin install git://github.com/fragility/spatial_adapter.git


Set up the PostGIS database
---------------------------

If you don't have PostGIS database template yet, create one::

  sudo su - postgres
  createdb -E UTF8 template_postgis # Create the template spatial database.
  createlang -d template_postgis plpgsql # Adding PLPGSQL language support.
  psql -d template_postgis -f /usr/share/postgresql-8.3-postgis/lwpostgis.sql
  psql -d template_postgis -f /usr/share/postgresql-8.3-postgis/spatial_ref_sys.sql
  cat <<EOS | psql -d template_postgis
  UPDATE pg_database SET datistemplate = TRUE WHERE datname = 'template_postgis';
  REVOKE ALL ON SCHEMA public FROM public;
  GRANT USAGE ON SCHEMA public TO public;
  GRANT ALL ON SCHEMA public TO postgres;
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE public.geometry_columns TO PUBLIC;
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE public.spatial_ref_sys TO PUBLIC;
  VACUUM FULL FREEZE;
  EOS

Change the connection properties in ``config/database.yml``.
Add a line ``template: template_postgis`` for each environment.

Create the development database, if it does not exist::

  rake db:create

Set up layers
-------------

You now need to create layers. In effect, a layer corresponds to a PostGIS table.

Create a model::

  ./script/generate model --skip-timestamps --skip-fixture WeatherStation name:string geom:point
  rake db:migrate

Import some data::

  ./script/runner "Geonames::Weather.weather(:north => 44.1, :south => -9.9, :east => -22.4, :west => 55.2).each { |st| WeatherStation.create(:name => st.stationName, :geom => Point.from_x_y(st.lng, st.lat)) }"

(needs lib/geonames.rb from http://github.com/pka/map_layers/tree in lib/)

Add a new controller with a the default actions for mapfish::

  class WeatherStationsController < ApplicationController

    # GET /weather_stations
    def index
      @weather_stations = WeatherStation.find_by_mapfish_filter(params)

      render :json => @weather_stations.to_geojson
    end

    # GET /weather_stations/1
    # GET /weather_stations/1.xml
    def show
      @weather_station = WeatherStation.find(params[:id])

      respond_to do |format|
        format.html # show.html.erb
        format.xml  { render :xml => @weather_station }
      end
    end

    # GET /weather_stations/new
    # GET /weather_stations/new.xml
    def new
      @weather_station = WeatherStation.new

      respond_to do |format|
        format.html # new.html.erb
        format.xml  { render :xml => @weather_station }
      end
    end

    # GET /weather_stations/1/edit
    def edit
      @weather_station = WeatherStation.find(params[:id])
    end

    # POST /weather_stations
    # POST /weather_stations.xml
    def create
      @weather_station = WeatherStation.new(params[:weather_station])

      respond_to do |format|
        if @weather_station.save
          flash[:notice] = 'WeatherStation was successfully created.'
          format.html { redirect_to(@weather_station) }
          format.xml  { render :xml => @weather_station, :status => :created, :location => @weather_station }
        else
          format.html { render :action => "new" }
          format.xml  { render :xml => @weather_station.errors, :status => :unprocessable_entity }
        end
      end
    end

    # PUT /weather_stations/1
    # PUT /weather_stations/1.xml
    def update
      @weather_station = WeatherStation.find(params[:id])

      respond_to do |format|
        if @weather_station.update_attributes(params[:weather_station])
          flash[:notice] = 'WeatherStation was successfully updated.'
          format.html { redirect_to(@weather_station) }
          format.xml  { head :ok }
        else
          format.html { render :action => "edit" }
          format.xml  { render :xml => @weather_station.errors, :status => :unprocessable_entity }
        end
      end
    end

    # DELETE /weather_stations/1
    # DELETE /weather_stations/1.xml
    def destroy
      @weather_station = WeatherStation.find(params[:id])
      @weather_station.destroy

      respond_to do |format|
        format.html { redirect_to(weather_stations_url) }
        format.xml  { head :ok }
      end
    end
  end

Create a model for an existing table::

  ./script/generate model --skip-migration --skip-fixture Country

Insert table name and custom id in ``app/models/country.rb``::

  set_table_name "world_factbk_simplified"
  set_primary_key "gid"

Add the controller::

  class CountriesController < ApplicationController

    # GET /countries
    def index
      @countries = Country.find_by_mapfish_filter(params)

      render :json => @countries.to_geojson
    end

    # GET /countries/1
    def show
      @country = Country.find(params[:id])

      render :json => @country.to_geojson(:only => [:gid, :country, :birth_rt, :death_rt, :fertility, :simplify])
    end

    # GET /countries/new
    # GET /countries/new.xml
    def new
      @country = Country.new

      respond_to do |format|
        format.html # new.html.erb
        format.xml  { render :xml => @country }
      end
    end

    # GET /countries/1/edit
    def edit
      @country = Country.find(params[:id])
    end

    # POST /countries
    # POST /countries.xml
    def create
      @country = Country.new(params[:country])

      respond_to do |format|
        if @country.save
          flash[:notice] = 'Country was successfully created.'
          format.html { redirect_to(@country) }
          format.xml  { render :xml => @country, :status => :created, :location => @country }
        else
          format.html { render :action => "new" }
          format.xml  { render :xml => @country.errors, :status => :unprocessable_entity }
        end
      end
    end

    # PUT /countries/1
    # PUT /countries/1.xml
    def update
      @country = Country.find(params[:id])

      respond_to do |format|
        if @country.update_attributes(params[:country])
          flash[:notice] = 'Country was successfully updated.'
          format.html { redirect_to(@country) }
          format.xml  { head :ok }
        else
          format.html { render :action => "edit" }
          format.xml  { render :xml => @country.errors, :status => :unprocessable_entity }
        end
      end
    end

    # DELETE /countries/1
    # DELETE /countries/1.xml
    def destroy
      @country = Country.find(params[:id])
      @country.destroy

      respond_to do |format|
        format.html { redirect_to(countries_url) }
        format.xml  { head :ok }
      end
    end
  end

  end


Add the layers to ``routes.rb``::

  map.resources :weather_stations
  map.resources :countries


Starting the web server
-----------------------

You should be all set now. Try starting the web server::

  ./script/server

and checkout ``http://localhost:3000/countries?maxfeatures=10``

Your browser should be displaying a nice GeoJSON object!

You can now go back to your webpage and configure MapFish widgets to access your layer through the URL ``http://localhost:3000/countries``.


License
-------

The Mapfish server plugin for Rails is released under the LGPL license.

*Copyright (c) 2008 Pirmin Kalberer, Sourcepole AG*
