--- CwController.js.upstream_rev_8791	2007-06-29 12:17:02.000000000 +0200
+++ CwController.js	2007-06-29 12:15:13.000000000 +0200
@@ -1,10 +1,10 @@
-dojo.provide("dijit._tree.Controller");
+dojo.provide("cartoweb._tree.CwController");
 
 dojo.require("dijit.base.Widget");
-dojo.require("dijit.Tree");
+dojo.require("cartoweb.CwTree");
 
 dojo.declare(
-	"dijit._tree.Controller",
+	"cartoweb._tree.CwController",
 	[dijit.base.Widget],
 {
 	// Summary: _tree.Controller performs all basic operations on Tree
@@ -46,6 +46,39 @@
 		console.log("execute message for " + message.node);
 	},
 	
+    onChecked: function(message) {
+    
+      console.log("checked (state): %o, %s %o", message, 
+          message.node.checkboxNode.value, message.node.checkboxNode.checked);
+
+      var checked = message.node.checkboxNode.checked;
+
+      if (message.node.item.layer_index != undefined) {
+        console.log("Toggling layer %i", message.node.item.layer_index);
+        // XXX no global map
+        var layer = map.layers[message.node.item.layer_index];
+        layer.setVisibility(checked, true);
+      }
+
+      if (message.node.item.wms_layer_index != undefined) {
+      
+        // XXX no global map
+        var layer = map.layers[message.node.item.wms_layer_index];
+        var wmsLayers = layer.params.LAYERS;
+        var clickedWmsLayer = message.node.item.wms_layer_name;
+
+        // XXX use dojo API
+        if (checked) {
+              wmsLayers.push(clickedWmsLayer);
+        } else {
+              OpenLayers.Util.removeItem(wmsLayers, clickedWmsLayer);
+        }
+        console.log("new layers: %o", wmsLayers);
+        layer.mergeNewParams(wmsLayers);
+      }
+      
+    },
+  
 	onNext: function(/*Object*/ message) {
 		// summary: down arrow pressed; move to next visible node
 
@@ -216,36 +249,60 @@
 });
 
 
+dojo.declare(
+	"cartoweb._tree.CwTreeContentProvider",
+	[],
+	{
+  getChildren: function(parent) {
+    if (!parent.children)
+      return [];
+    return dojo.map(parent.children, function(c) {
+      var ret = {};
+      dojo.mixin(ret, c);
+      ret.isFolder = ret.children && ret.children.length > 0;
+      ret.item = c;
+      return ret;
+    });
+  },
+  getParent: function(element) {
+    /* unused? */
+  },
+  hasChildren: function(element) {
+    /* in getChildren ?? */
+  }
+  // inputChanged??
+});
 
 dojo.declare(
-	"dijit._tree.DataController",
-	dijit._tree.Controller,
+	"cartoweb._tree.CwDataController2",
+	cartoweb._tree.CwController,
+	function() {
+		this._cookie = Math.random();
+		console.log("Controller %o", arguments);
+		this.contentProvider = new cartoweb._tree.CwTreeContentProvider();
+	},
 {
 	// summary
 	//		Controller for tree that hooks up to dojo.data
 
 	onAfterTreeCreate: function(message) {
+	
+		console.log("afterTreeCreate %i %o", this._cookie, message.tree);
+
 		// when a tree is created, we query against the store to get the top level nodes
 		// in the tree
 		var tree = message.tree;
+		this.model = tree.model;
+		
+		console.log("Showing model %o:", this.model);
+		tree.setChildren(this.contentProvider.getChildren(this.model));
 
-		var _this = this;
-		function onComplete(/*dojo.data.Item[]*/ items){
-			var childParams=dojo.map(items,
-				function(item){
-					return {
-						item: item,
-						label: _this.store.getValue(item, _this.labelAttr),
-						type: _this.store.getValue(item, _this.typeAttr),
-						isFolder: _this.store.hasAttribute(item, _this.childrenAttr)
-						};
-				});
-			tree.setChildren(childParams);
-		}
-		this.store.fetch({ query: this.query, onComplete: onComplete });
 	},
 
 	_expand: function(/*_TreeNode*/ node){
+	
+		console.log("expand");
+	
 		var store = this.store;
 		var getValue = this.store.getValue;
 
@@ -255,57 +312,30 @@
 				return;
 
 			case "UNCHECKED":
-				// need to load all the children, and then expand
-				var parentItem = node.item;
-				var childItems = store.getValues(parentItem, this.childrenAttr);
-	
-				// count how many items need to be loaded
-				var _waitCount = 0;
-				dojo.forEach(childItems, function(item){ if(!store.isItemLoaded(item)){ _waitCount++; } });
-	
-		       	if(_waitCount == 0){
-		       		// all items are already loaded.  proceed..
-		       		this._onLoadAllItems(node, childItems);
-		       	}else{
-		       		// still waiting for some or all of the items to load
-		       		node.markProcessing();
-	
-					var _this = this;
-					function onItem(item){
-		   				if(--_waitCount == 0){
-							// all nodes have been loaded, send them to the tree
-							node.unmarkProcessing();
-							_this._onLoadAllItems(node, childItems);
-						}
-					}
-					dojo.forEach(childItems, function(item){
-						if(!store.isItemLoaded(item)){
-			       			store.loadItem({item: item, onItem: onItem});
-			       		}
-			       	});
-		       	}
-		       	break;
-		       	
+				console.log("unchecked");
+
+				this._onLoadAllItems(node, node.item);
+
+				break;
+						
 			default:
 				// data is already loaded; just proceed
-				dijit._tree.Controller.prototype._expand.apply(this, arguments);
+				cartoweb._tree.CwController.prototype._expand.apply(this, arguments);
 				break;
 		}
 	},
 
 	_onLoadAllItems: function(/*_TreeNode*/ node, /*dojo.data.Item[]*/ items){
-		// sumary: callback when all the children of a given node have been loaded
-		// TODO: should this be used when the top level nodes are loaded too?
-		var childParams=dojo.map(items, function(item){
-			return {
-				item: item,
-				label: this.store.getValue(item, this.labelAttr),
-				type: this.store.getValue(item, this.typeAttr),
-				isFolder: this.store.hasAttribute(item, this.childrenAttr)
-			};
-		}, this);
-		node.setChildren(childParams);
-		dijit._tree.Controller.prototype._expand.apply(this, arguments);
+		
+		var children = this.contentProvider.getChildren(items);
+		
+		console.log("items");
+		console.log(items);
+		console.log(children);
+		
+		node.setChildren(children);
+
+		cartoweb._tree.CwController.prototype._expand.apply(this, arguments);
 	},
 
 	_collapse: function(/*_TreeNode*/ node){
@@ -313,7 +343,7 @@
 			// ignore clicks while we are in the process of loading data
 			return;
 		}
-		dijit._tree.Controller.prototype._collapse.apply(this, arguments);
+		cartoweb._tree.CwController.prototype._collapse.apply(this, arguments);
 	}
 
 });
